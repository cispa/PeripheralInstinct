import quopri
import sys

if len(sys.argv) > 1:
    FILENAME = sys.argv[1]
else:
    FILENAME = "launchpad.syx"

sysx_data = open(FILENAME, "rb").read() 
decoded_data = []

def seven_to_eight(data):
    result = []
    for i in range(0, len(data), 8):
        result.append((data[i  ] << 1) | (data[i+1] >> 6))
        result.append((data[i+1] << 2) | (data[i+2] >> 5))
        result.append((data[i+2] << 3) | (data[i+3] >> 4))
        result.append((data[i+3] << 4) | (data[i+4] >> 3))
        result.append((data[i+4] << 5) | (data[i+5] >> 2))
        result.append((data[i+5] << 6) | (data[i+6] >> 1))
        result.append((data[i+6] << 7) | (data[i+7] >> 0))
    for i in range(len(result)):
        result[i] &= 0xff
    
    return bytes(result)

def decode_bytes(data):
    d = seven_to_eight(data + b"\x00\x00\x00")[:-3]
    return d
    
def decode_block(offset):
    global sysx_data
    
    assert sysx_data[offset:offset+5] == bytes([0xf0, 0x00, 0x20, 0x29, 0x00]), "invalid header"
    
    offset += 5
    
    kind = sysx_data[offset]
    
    offset += 1
    
    data = []
    
    while sysx_data[offset] != 0xf7:
        data.append(sysx_data[offset])
        offset += 1
    
    return offset+1, kind, decode_bytes(bytes(data)) if kind in [0x72, 0x73] else b""
    
    



i = 0

bin_data = b""

while i < len(sysx_data):
   i, kind, data = decode_block(i)
   
   if kind == 0x72:
       bin_data += data
       pass
   elif kind == 0x73:
       # for some reason, this needs to be pre-pended?
       bin_data = data + bin_data
       pass
# print(bin_data.hex(" "))
with open(FILENAME.replace(".syx", "") + ".bin", "wb") as f:
    f.write(bin_data)
